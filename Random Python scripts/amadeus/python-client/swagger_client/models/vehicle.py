# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Vehicle(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Vehicle - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'vehicle_info': 'VehicleInfo',
            'rates': 'Rate',
            'estimated_total': 'Amount',
            'image': 'Image'
        }

        self.attribute_map = {
            'vehicle_info': 'vehicle_info',
            'rates': 'rates',
            'estimated_total': 'estimated_total',
            'image': 'image'
        }

        self._vehicle_info = None
        self._rates = None
        self._estimated_total = None
        self._image = None

    @property
    def vehicle_info(self):
        """
        Gets the vehicle_info of this Vehicle.
        More information about the type of vehicle on offer.

        :return: The vehicle_info of this Vehicle.
        :rtype: VehicleInfo
        """
        return self._vehicle_info

    @vehicle_info.setter
    def vehicle_info(self, vehicle_info):
        """
        Sets the vehicle_info of this Vehicle.
        More information about the type of vehicle on offer.

        :param vehicle_info: The vehicle_info of this Vehicle.
        :type: VehicleInfo
        """
        self._vehicle_info = vehicle_info

    @property
    def rates(self):
        """
        Gets the rates of this Vehicle.
        Rates that will be applied during the duration of the car rental requested. These rates are generally not inclusive of tax and are used by the car rental company to compute the total cost at the end of the rental period.

        :return: The rates of this Vehicle.
        :rtype: Rate
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """
        Sets the rates of this Vehicle.
        Rates that will be applied during the duration of the car rental requested. These rates are generally not inclusive of tax and are used by the car rental company to compute the total cost at the end of the rental period.

        :param rates: The rates of this Vehicle.
        :type: Rate
        """
        self._rates = rates

    @property
    def estimated_total(self):
        """
        Gets the estimated_total of this Vehicle.
        The estimated total cost of the rental given the rental period and location provided, including all mandatory taxes and charges, and using a default set of rental options and restrictions defined by the car company.

        :return: The estimated_total of this Vehicle.
        :rtype: Amount
        """
        return self._estimated_total

    @estimated_total.setter
    def estimated_total(self, estimated_total):
        """
        Sets the estimated_total of this Vehicle.
        The estimated total cost of the rental given the rental period and location provided, including all mandatory taxes and charges, and using a default set of rental options and restrictions defined by the car company.

        :param estimated_total: The estimated_total of this Vehicle.
        :type: Amount
        """
        self._estimated_total = estimated_total

    @property
    def image(self):
        """
        Gets the image of this Vehicle.
        An image to give an indication of what to expect when renting this vehicle.

        :return: The image of this Vehicle.
        :rtype: Image
        """
        return self._image

    @image.setter
    def image(self, image):
        """
        Sets the image of this Vehicle.
        An image to give an indication of what to expect when renting this vehicle.

        :param image: The image of this Vehicle.
        :type: Image
        """
        self._image = image

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

