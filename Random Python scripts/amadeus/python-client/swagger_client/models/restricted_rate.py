# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class RestrictedRate(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        RestrictedRate - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'rate_code': 'str',
            'rate_name': 'str',
            'restrictions': 'str'
        }

        self.attribute_map = {
            'rate_code': 'rate_code',
            'rate_name': 'rate_name',
            'restrictions': 'restrictions'
        }

        self._rate_code = None
        self._rate_name = None
        self._restrictions = None

    @property
    def rate_code(self):
        """
        Gets the rate_code of this RestrictedRate.
        The unique identifier of this rate.

        :return: The rate_code of this RestrictedRate.
        :rtype: str
        """
        return self._rate_code

    @rate_code.setter
    def rate_code(self, rate_code):
        """
        Sets the rate_code of this RestrictedRate.
        The unique identifier of this rate.

        :param rate_code: The rate_code of this RestrictedRate.
        :type: str
        """
        self._rate_code = rate_code

    @property
    def rate_name(self):
        """
        Gets the rate_name of this RestrictedRate.
        The name used by the company to describe this rate.

        :return: The rate_name of this RestrictedRate.
        :rtype: str
        """
        return self._rate_name

    @rate_name.setter
    def rate_name(self, rate_name):
        """
        Sets the rate_name of this RestrictedRate.
        The name used by the company to describe this rate.

        :param rate_name: The rate_name of this RestrictedRate.
        :type: str
        """
        self._rate_name = rate_name

    @property
    def restrictions(self):
        """
        Gets the restrictions of this RestrictedRate.
        An enumeration of the type of restrictions associated with this rate.

        :return: The restrictions of this RestrictedRate.
        :rtype: str
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """
        Sets the restrictions of this RestrictedRate.
        An enumeration of the type of restrictions associated with this rate.

        :param restrictions: The restrictions of this RestrictedRate.
        :type: str
        """
        self._restrictions = restrictions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

