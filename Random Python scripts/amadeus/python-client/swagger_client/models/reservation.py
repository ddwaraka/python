# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Reservation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Reservation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'flight_tickets': 'FlightTicket',
            'unticketed_flights': 'list[FlightReservationBound]',
            'cars': 'list[CarReservation]',
            'hotels': 'list[HotelReservation]',
            'others': 'list[OtherReservation]'
        }

        self.attribute_map = {
            'flight_tickets': 'flight_tickets',
            'unticketed_flights': 'unticketed_flights',
            'cars': 'cars',
            'hotels': 'hotels',
            'others': 'others'
        }

        self._flight_tickets = None
        self._unticketed_flights = None
        self._cars = None
        self._hotels = None
        self._others = None

    @property
    def flight_tickets(self):
        """
        Gets the flight_tickets of this Reservation.
        The flight itineraries with a ticket or transitional stored ticket (TST) in this reservation, and their prices.

        :return: The flight_tickets of this Reservation.
        :rtype: FlightTicket
        """
        return self._flight_tickets

    @flight_tickets.setter
    def flight_tickets(self, flight_tickets):
        """
        Sets the flight_tickets of this Reservation.
        The flight itineraries with a ticket or transitional stored ticket (TST) in this reservation, and their prices.

        :param flight_tickets: The flight_tickets of this Reservation.
        :type: FlightTicket
        """
        self._flight_tickets = flight_tickets

    @property
    def unticketed_flights(self):
        """
        Gets the unticketed_flights of this Reservation.
        The flight itineraries in this reservation that have not yet been ticketed or priced.

        :return: The unticketed_flights of this Reservation.
        :rtype: list[FlightReservationBound]
        """
        return self._unticketed_flights

    @unticketed_flights.setter
    def unticketed_flights(self, unticketed_flights):
        """
        Sets the unticketed_flights of this Reservation.
        The flight itineraries in this reservation that have not yet been ticketed or priced.

        :param unticketed_flights: The unticketed_flights of this Reservation.
        :type: list[FlightReservationBound]
        """
        self._unticketed_flights = unticketed_flights

    @property
    def cars(self):
        """
        Gets the cars of this Reservation.
        The rental cars reserved.

        :return: The cars of this Reservation.
        :rtype: list[CarReservation]
        """
        return self._cars

    @cars.setter
    def cars(self, cars):
        """
        Sets the cars of this Reservation.
        The rental cars reserved.

        :param cars: The cars of this Reservation.
        :type: list[CarReservation]
        """
        self._cars = cars

    @property
    def hotels(self):
        """
        Gets the hotels of this Reservation.
        The hotel room bookings in this reservation.

        :return: The hotels of this Reservation.
        :rtype: list[HotelReservation]
        """
        return self._hotels

    @hotels.setter
    def hotels(self, hotels):
        """
        Sets the hotels of this Reservation.
        The hotel room bookings in this reservation.

        :param hotels: The hotels of this Reservation.
        :type: list[HotelReservation]
        """
        self._hotels = hotels

    @property
    def others(self):
        """
        Gets the others of this Reservation.
        Free text information to represent other travel items that may be considered part of the travel itinerary in this reservation.

        :return: The others of this Reservation.
        :rtype: list[OtherReservation]
        """
        return self._others

    @others.setter
    def others(self, others):
        """
        Sets the others of this Reservation.
        Free text information to represent other travel items that may be considered part of the travel itinerary in this reservation.

        :param others: The others of this Reservation.
        :type: list[OtherReservation]
        """
        self._others = others

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

