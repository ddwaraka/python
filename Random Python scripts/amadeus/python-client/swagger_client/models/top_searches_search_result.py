# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TopSearchesSearchResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TopSearchesSearchResult - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'destination': 'str',
            'searches': 'int',
            'searches_prior_year': 'int'
        }

        self.attribute_map = {
            'destination': 'destination',
            'searches': 'searches',
            'searches_prior_year': 'searches_prior_year'
        }

        self._destination = None
        self._searches = None
        self._searches_prior_year = None

    @property
    def destination(self):
        """
        Gets the destination of this TopSearchesSearchResult.
        The IATA code of the city or airport to which the traveler may go, from the provided origin

        :return: The destination of this TopSearchesSearchResult.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this TopSearchesSearchResult.
        The IATA code of the city or airport to which the traveler may go, from the provided origin

        :param destination: The destination of this TopSearchesSearchResult.
        :type: str
        """
        self._destination = destination

    @property
    def searches(self):
        """
        Gets the searches of this TopSearchesSearchResult.
        Average number of daily searches for the destination during the search period provided

        :return: The searches of this TopSearchesSearchResult.
        :rtype: int
        """
        return self._searches

    @searches.setter
    def searches(self, searches):
        """
        Sets the searches of this TopSearchesSearchResult.
        Average number of daily searches for the destination during the search period provided

        :param searches: The searches of this TopSearchesSearchResult.
        :type: int
        """
        self._searches = searches

    @property
    def searches_prior_year(self):
        """
        Gets the searches_prior_year of this TopSearchesSearchResult.
        Prior year average number of daily searches for the destination during the search period provided

        :return: The searches_prior_year of this TopSearchesSearchResult.
        :rtype: int
        """
        return self._searches_prior_year

    @searches_prior_year.setter
    def searches_prior_year(self, searches_prior_year):
        """
        Sets the searches_prior_year of this TopSearchesSearchResult.
        Prior year average number of daily searches for the destination during the search period provided

        :param searches_prior_year: The searches_prior_year of this TopSearchesSearchResult.
        :type: int
        """
        self._searches_prior_year = searches_prior_year

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

