# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TrainSearchPricing(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TrainSearchPricing - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'service_class': 'str',
            'booking_code': 'str',
            'accomodation': 'str',
            'total_price': 'Amount',
            'rate': 'RestrictedRate'
        }

        self.attribute_map = {
            'service_class': 'service_class',
            'booking_code': 'booking_code',
            'accomodation': 'accomodation',
            'total_price': 'total_price',
            'rate': 'rate'
        }

        self._service_class = None
        self._booking_code = None
        self._accomodation = None
        self._total_price = None
        self._rate = None

    @property
    def service_class(self):
        """
        Gets the service_class of this TrainSearchPricing.
        A standard enumeration of the type of seat, bed or service the passenger can expect.

        :return: The service_class of this TrainSearchPricing.
        :rtype: str
        """
        return self._service_class

    @service_class.setter
    def service_class(self, service_class):
        """
        Sets the service_class of this TrainSearchPricing.
        A standard enumeration of the type of seat, bed or service the passenger can expect.

        :param service_class: The service_class of this TrainSearchPricing.
        :type: str
        """
        self._service_class = service_class

    @property
    def booking_code(self):
        """
        Gets the booking_code of this TrainSearchPricing.
        A code the identifies the type of booking class being used.

        :return: The booking_code of this TrainSearchPricing.
        :rtype: str
        """
        return self._booking_code

    @booking_code.setter
    def booking_code(self, booking_code):
        """
        Sets the booking_code of this TrainSearchPricing.
        A code the identifies the type of booking class being used.

        :param booking_code: The booking_code of this TrainSearchPricing.
        :type: str
        """
        self._booking_code = booking_code

    @property
    def accomodation(self):
        """
        Gets the accomodation of this TrainSearchPricing.
        A standard enumeration of the mode in which the passenger is accommodated. For example&colon; SEAT, BERTH, CABIN, CARGO, UNKNOWN.

        :return: The accomodation of this TrainSearchPricing.
        :rtype: str
        """
        return self._accomodation

    @accomodation.setter
    def accomodation(self, accomodation):
        """
        Sets the accomodation of this TrainSearchPricing.
        A standard enumeration of the mode in which the passenger is accommodated. For example&colon; SEAT, BERTH, CABIN, CARGO, UNKNOWN.

        :param accomodation: The accomodation of this TrainSearchPricing.
        :type: str
        """
        self._accomodation = accomodation

    @property
    def total_price(self):
        """
        Gets the total_price of this TrainSearchPricing.
        The total cost of this service.

        :return: The total_price of this TrainSearchPricing.
        :rtype: Amount
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """
        Sets the total_price of this TrainSearchPricing.
        The total cost of this service.

        :param total_price: The total_price of this TrainSearchPricing.
        :type: Amount
        """
        self._total_price = total_price

    @property
    def rate(self):
        """
        Gets the rate of this TrainSearchPricing.
        A rate identifying type of charge being levied for this service, and the restrictions that apply.

        :return: The rate of this TrainSearchPricing.
        :rtype: RestrictedRate
        """
        return self._rate

    @rate.setter
    def rate(self, rate):
        """
        Sets the rate of this TrainSearchPricing.
        A rate identifying type of charge being levied for this service, and the restrictions that apply.

        :param rate: The rate of this TrainSearchPricing.
        :type: RestrictedRate
        """
        self._rate = rate

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

