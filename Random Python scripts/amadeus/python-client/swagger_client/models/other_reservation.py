# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class OtherReservation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        OtherReservation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'date': 'date',
            'location': 'str',
            'description': 'str',
            'traveler_ids': 'list[str]',
            'booking_info': 'OtherReservationBookingInfo'
        }

        self.attribute_map = {
            'id': 'id',
            'date': 'date',
            'location': 'location',
            'description': 'description',
            'traveler_ids': 'traveler_ids',
            'booking_info': 'booking_info'
        }

        self._id = None
        self._date = None
        self._location = None
        self._description = None
        self._traveler_ids = None
        self._booking_info = None

    @property
    def id(self):
        """
        Gets the id of this OtherReservation.
        Uniquely identifies this other reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.

        :return: The id of this OtherReservation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this OtherReservation.
        Uniquely identifies this other reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.

        :param id: The id of this OtherReservation.
        :type: str
        """
        self._id = id

    @property
    def date(self):
        """
        Gets the date of this OtherReservation.
        Date on which this other reservation will begin, in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd.

        :return: The date of this OtherReservation.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this OtherReservation.
        Date on which this other reservation will begin, in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd.

        :param date: The date of this OtherReservation.
        :type: date
        """
        self._date = date

    @property
    def location(self):
        """
        Gets the location of this OtherReservation.
        A 3 letter IATA code that identifies where this other reservation will occur.

        :return: The location of this OtherReservation.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this OtherReservation.
        A 3 letter IATA code that identifies where this other reservation will occur.

        :param location: The location of this OtherReservation.
        :type: str
        """
        self._location = location

    @property
    def description(self):
        """
        Gets the description of this OtherReservation.
        A free-text description of this reservation, that will inform you of its functional meaning.

        :return: The description of this OtherReservation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this OtherReservation.
        A free-text description of this reservation, that will inform you of its functional meaning.

        :param description: The description of this OtherReservation.
        :type: str
        """
        self._description = description

    @property
    def traveler_ids(self):
        """
        Gets the traveler_ids of this OtherReservation.
        Traveler identifiers to indicate the travelers to whom this reservation applies.

        :return: The traveler_ids of this OtherReservation.
        :rtype: list[str]
        """
        return self._traveler_ids

    @traveler_ids.setter
    def traveler_ids(self, traveler_ids):
        """
        Sets the traveler_ids of this OtherReservation.
        Traveler identifiers to indicate the travelers to whom this reservation applies.

        :param traveler_ids: The traveler_ids of this OtherReservation.
        :type: list[str]
        """
        self._traveler_ids = traveler_ids

    @property
    def booking_info(self):
        """
        Gets the booking_info of this OtherReservation.
        The status of this reservation.

        :return: The booking_info of this OtherReservation.
        :rtype: OtherReservationBookingInfo
        """
        return self._booking_info

    @booking_info.setter
    def booking_info(self, booking_info):
        """
        Sets the booking_info of this OtherReservation.
        The status of this reservation.

        :param booking_info: The booking_info of this OtherReservation.
        :type: OtherReservationBookingInfo
        """
        self._booking_info = booking_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

