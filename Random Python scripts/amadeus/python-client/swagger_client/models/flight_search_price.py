# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class FlightSearchPrice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FlightSearchPrice - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'total_price': 'str',
            'price_per_adult': 'Fare',
            'price_per_child': 'Fare',
            'price_per_infant': 'Fare',
            'restrictions': 'FareRestrictions'
        }

        self.attribute_map = {
            'total_price': 'total_price',
            'price_per_adult': 'price_per_adult',
            'price_per_child': 'price_per_child',
            'price_per_infant': 'price_per_infant',
            'restrictions': 'restrictions'
        }

        self._total_price = None
        self._price_per_adult = None
        self._price_per_child = None
        self._price_per_infant = None
        self._restrictions = None

    @property
    def total_price(self):
        """
        Gets the total_price of this FlightSearchPrice.
        The total price for all the requested passengers for this flight

        :return: The total_price of this FlightSearchPrice.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """
        Sets the total_price of this FlightSearchPrice.
        The total price for all the requested passengers for this flight

        :param total_price: The total_price of this FlightSearchPrice.
        :type: str
        """
        self._total_price = total_price

    @property
    def price_per_adult(self):
        """
        Gets the price_per_adult of this FlightSearchPrice.
        The per-passenger fare for each adult on this flight

        :return: The price_per_adult of this FlightSearchPrice.
        :rtype: Fare
        """
        return self._price_per_adult

    @price_per_adult.setter
    def price_per_adult(self, price_per_adult):
        """
        Sets the price_per_adult of this FlightSearchPrice.
        The per-passenger fare for each adult on this flight

        :param price_per_adult: The price_per_adult of this FlightSearchPrice.
        :type: Fare
        """
        self._price_per_adult = price_per_adult

    @property
    def price_per_child(self):
        """
        Gets the price_per_child of this FlightSearchPrice.
        The per-passenger fare for each child on this flight

        :return: The price_per_child of this FlightSearchPrice.
        :rtype: Fare
        """
        return self._price_per_child

    @price_per_child.setter
    def price_per_child(self, price_per_child):
        """
        Sets the price_per_child of this FlightSearchPrice.
        The per-passenger fare for each child on this flight

        :param price_per_child: The price_per_child of this FlightSearchPrice.
        :type: Fare
        """
        self._price_per_child = price_per_child

    @property
    def price_per_infant(self):
        """
        Gets the price_per_infant of this FlightSearchPrice.
        The per-passenger fare for each infant on this flight

        :return: The price_per_infant of this FlightSearchPrice.
        :rtype: Fare
        """
        return self._price_per_infant

    @price_per_infant.setter
    def price_per_infant(self, price_per_infant):
        """
        Sets the price_per_infant of this FlightSearchPrice.
        The per-passenger fare for each infant on this flight

        :param price_per_infant: The price_per_infant of this FlightSearchPrice.
        :type: Fare
        """
        self._price_per_infant = price_per_infant

    @property
    def restrictions(self):
        """
        Gets the restrictions of this FlightSearchPrice.
        The restrictions associated with this fare

        :return: The restrictions of this FlightSearchPrice.
        :rtype: FareRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """
        Sets the restrictions of this FlightSearchPrice.
        The restrictions associated with this fare

        :param restrictions: The restrictions of this FlightSearchPrice.
        :type: FareRestrictions
        """
        self._restrictions = restrictions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

