# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class HotelRoom(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        HotelRoom - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'booking_code': 'str',
            'room_type_code': 'str',
            'rate_plan_code': 'str',
            'total_price': 'Amount',
            'rates': 'list[PeriodRate]',
            'descriptions': 'list[str]'
        }

        self.attribute_map = {
            'booking_code': 'booking_code',
            'room_type_code': 'room_type_code',
            'rate_plan_code': 'rate_plan_code',
            'total_price': 'total_price',
            'rates': 'rates',
            'descriptions': 'descriptions'
        }

        self._booking_code = None
        self._room_type_code = None
        self._rate_plan_code = None
        self._total_price = None
        self._rates = None
        self._descriptions = None

    @property
    def booking_code(self):
        """
        Gets the booking_code of this HotelRoom.
        The booking code identifies a product at the hotel. It can be used to book a room.

        :return: The booking_code of this HotelRoom.
        :rtype: str
        """
        return self._booking_code

    @booking_code.setter
    def booking_code(self, booking_code):
        """
        Sets the booking_code of this HotelRoom.
        The booking code identifies a product at the hotel. It can be used to book a room.

        :param booking_code: The booking_code of this HotelRoom.
        :type: str
        """
        self._booking_code = booking_code

    @property
    def room_type_code(self):
        """
        Gets the room_type_code of this HotelRoom.
        A 3-letter code to identify a specific room type.

        :return: The room_type_code of this HotelRoom.
        :rtype: str
        """
        return self._room_type_code

    @room_type_code.setter
    def room_type_code(self, room_type_code):
        """
        Sets the room_type_code of this HotelRoom.
        A 3-letter code to identify a specific room type.

        :param room_type_code: The room_type_code of this HotelRoom.
        :type: str
        """
        self._room_type_code = room_type_code

    @property
    def rate_plan_code(self):
        """
        Gets the rate_plan_code of this HotelRoom.
        A 3 letter code to designate different rates base on traveler type.

        :return: The rate_plan_code of this HotelRoom.
        :rtype: str
        """
        return self._rate_plan_code

    @rate_plan_code.setter
    def rate_plan_code(self, rate_plan_code):
        """
        Sets the rate_plan_code of this HotelRoom.
        A 3 letter code to designate different rates base on traveler type.

        :param rate_plan_code: The rate_plan_code of this HotelRoom.
        :type: str
        """
        self._rate_plan_code = rate_plan_code

    @property
    def total_price(self):
        """
        Gets the total_price of this HotelRoom.
        The total price of staying in this room from the given check-in date to the given check-out date

        :return: The total_price of this HotelRoom.
        :rtype: Amount
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """
        Sets the total_price of this HotelRoom.
        The total price of staying in this room from the given check-in date to the given check-out date

        :param total_price: The total_price of this HotelRoom.
        :type: Amount
        """
        self._total_price = total_price

    @property
    def rates(self):
        """
        Gets the rates of this HotelRoom.
        The total price of staying in this room from the given check-in date to the given check-out date

        :return: The rates of this HotelRoom.
        :rtype: list[PeriodRate]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """
        Sets the rates of this HotelRoom.
        The total price of staying in this room from the given check-in date to the given check-out date

        :param rates: The rates of this HotelRoom.
        :type: list[PeriodRate]
        """
        self._rates = rates

    @property
    def descriptions(self):
        """
        Gets the descriptions of this HotelRoom.
        An array of description strings describing room and rate types features

        :return: The descriptions of this HotelRoom.
        :rtype: list[str]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this HotelRoom.
        An array of description strings describing room and rate types features

        :param descriptions: The descriptions of this HotelRoom.
        :type: list[str]
        """
        self._descriptions = descriptions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

