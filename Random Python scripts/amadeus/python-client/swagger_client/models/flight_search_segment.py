# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class FlightSearchSegment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FlightSearchSegment - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'departs_at': 'str',
            'arrives_at': 'str',
            'origin': 'Airport',
            'destination': 'Airport',
            'marketing_airline': 'str',
            'operating_airline': 'str',
            'flight_number': 'str',
            'aircraft': 'str',
            'booking_info': 'FlightSearchBookingInfo'
        }

        self.attribute_map = {
            'departs_at': 'departs_at',
            'arrives_at': 'arrives_at',
            'origin': 'origin',
            'destination': 'destination',
            'marketing_airline': 'marketing_airline',
            'operating_airline': 'operating_airline',
            'flight_number': 'flight_number',
            'aircraft': 'aircraft',
            'booking_info': 'booking_info'
        }

        self._departs_at = None
        self._arrives_at = None
        self._origin = None
        self._destination = None
        self._marketing_airline = None
        self._operating_airline = None
        self._flight_number = None
        self._aircraft = None
        self._booking_info = None

    @property
    def departs_at(self):
        """
        Gets the departs_at of this FlightSearchSegment.
        Date and time of departure at the origin, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>  date format yyyy-MM-ddTHH:mm in the local time at the origin airport

        :return: The departs_at of this FlightSearchSegment.
        :rtype: str
        """
        return self._departs_at

    @departs_at.setter
    def departs_at(self, departs_at):
        """
        Sets the departs_at of this FlightSearchSegment.
        Date and time of departure at the origin, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>  date format yyyy-MM-ddTHH:mm in the local time at the origin airport

        :param departs_at: The departs_at of this FlightSearchSegment.
        :type: str
        """
        self._departs_at = departs_at

    @property
    def arrives_at(self):
        """
        Gets the arrives_at of this FlightSearchSegment.
        Date and time of departure at the destination, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>  date format yyyy-MM-ddTHH:mm in the local time at the destination airport

        :return: The arrives_at of this FlightSearchSegment.
        :rtype: str
        """
        return self._arrives_at

    @arrives_at.setter
    def arrives_at(self, arrives_at):
        """
        Sets the arrives_at of this FlightSearchSegment.
        Date and time of departure at the destination, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>  date format yyyy-MM-ddTHH:mm in the local time at the destination airport

        :param arrives_at: The arrives_at of this FlightSearchSegment.
        :type: str
        """
        self._arrives_at = arrives_at

    @property
    def origin(self):
        """
        Gets the origin of this FlightSearchSegment.
        Information on the origin airport, from which this flight departs

        :return: The origin of this FlightSearchSegment.
        :rtype: Airport
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """
        Sets the origin of this FlightSearchSegment.
        Information on the origin airport, from which this flight departs

        :param origin: The origin of this FlightSearchSegment.
        :type: Airport
        """
        self._origin = origin

    @property
    def destination(self):
        """
        Gets the destination of this FlightSearchSegment.
        Information on the destination airport, at which this flight arrives

        :return: The destination of this FlightSearchSegment.
        :rtype: Airport
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this FlightSearchSegment.
        Information on the destination airport, at which this flight arrives

        :param destination: The destination of this FlightSearchSegment.
        :type: Airport
        """
        self._destination = destination

    @property
    def marketing_airline(self):
        """
        Gets the marketing_airline of this FlightSearchSegment.
        The 2 character alphanumeric IATA airline code of the airline that is responsible for the traveller this flight

        :return: The marketing_airline of this FlightSearchSegment.
        :rtype: str
        """
        return self._marketing_airline

    @marketing_airline.setter
    def marketing_airline(self, marketing_airline):
        """
        Sets the marketing_airline of this FlightSearchSegment.
        The 2 character alphanumeric IATA airline code of the airline that is responsible for the traveller this flight

        :param marketing_airline: The marketing_airline of this FlightSearchSegment.
        :type: str
        """
        self._marketing_airline = marketing_airline

    @property
    def operating_airline(self):
        """
        Gets the operating_airline of this FlightSearchSegment.
        The 2 character alphanumeric IATA airline code of the airline that is providing the aircraft for this flight. Note that in the USA, if the marketing and operating carrier are different, you are legally required to display this in your application.

        :return: The operating_airline of this FlightSearchSegment.
        :rtype: str
        """
        return self._operating_airline

    @operating_airline.setter
    def operating_airline(self, operating_airline):
        """
        Sets the operating_airline of this FlightSearchSegment.
        The 2 character alphanumeric IATA airline code of the airline that is providing the aircraft for this flight. Note that in the USA, if the marketing and operating carrier are different, you are legally required to display this in your application.

        :param operating_airline: The operating_airline of this FlightSearchSegment.
        :type: str
        """
        self._operating_airline = operating_airline

    @property
    def flight_number(self):
        """
        Gets the flight_number of this FlightSearchSegment.
        The identifier that the airline uses for this flight route. This is most commonly - but not always - a number. When combined with the airline and date, it identifies an individual aircraft's flight

        :return: The flight_number of this FlightSearchSegment.
        :rtype: str
        """
        return self._flight_number

    @flight_number.setter
    def flight_number(self, flight_number):
        """
        Sets the flight_number of this FlightSearchSegment.
        The identifier that the airline uses for this flight route. This is most commonly - but not always - a number. When combined with the airline and date, it identifies an individual aircraft's flight

        :param flight_number: The flight_number of this FlightSearchSegment.
        :type: str
        """
        self._flight_number = flight_number

    @property
    def aircraft(self):
        """
        Gets the aircraft of this FlightSearchSegment.
        The <a href=\"http://www.jacanaent.com/JacTechLib/07Aviation/AircraftTypeCodes.txt\">IATA aircraft type designator</a> of aircraft that will be used for this flight

        :return: The aircraft of this FlightSearchSegment.
        :rtype: str
        """
        return self._aircraft

    @aircraft.setter
    def aircraft(self, aircraft):
        """
        Sets the aircraft of this FlightSearchSegment.
        The <a href=\"http://www.jacanaent.com/JacTechLib/07Aviation/AircraftTypeCodes.txt\">IATA aircraft type designator</a> of aircraft that will be used for this flight

        :param aircraft: The aircraft of this FlightSearchSegment.
        :type: str
        """
        self._aircraft = aircraft

    @property
    def booking_info(self):
        """
        Gets the booking_info of this FlightSearchSegment.
        A booking information object with additional details about how the quality of this flight at the given price.

        :return: The booking_info of this FlightSearchSegment.
        :rtype: FlightSearchBookingInfo
        """
        return self._booking_info

    @booking_info.setter
    def booking_info(self, booking_info):
        """
        Sets the booking_info of this FlightSearchSegment.
        A booking information object with additional details about how the quality of this flight at the given price.

        :param booking_info: The booking_info of this FlightSearchSegment.
        :type: FlightSearchBookingInfo
        """
        self._booking_info = booking_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

