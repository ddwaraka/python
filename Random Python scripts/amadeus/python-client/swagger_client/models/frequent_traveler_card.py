# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class FrequentTravelerCard(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        FrequentTravelerCard - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'issuer_type': 'str',
            'company_code': 'str',
            'card_number': 'str'
        }

        self.attribute_map = {
            'issuer_type': 'issuer_type',
            'company_code': 'company_code',
            'card_number': 'card_number'
        }

        self._issuer_type = None
        self._company_code = None
        self._card_number = None

    @property
    def issuer_type(self):
        """
        Gets the issuer_type of this FrequentTravelerCard.
        The type of organization that issued the card. This is an enumeration, possible values are AIRLINE, HOTEL_CHAIN, RENTAL_CAR_PROVIDER, RAILWAY.

        :return: The issuer_type of this FrequentTravelerCard.
        :rtype: str
        """
        return self._issuer_type

    @issuer_type.setter
    def issuer_type(self, issuer_type):
        """
        Sets the issuer_type of this FrequentTravelerCard.
        The type of organization that issued the card. This is an enumeration, possible values are AIRLINE, HOTEL_CHAIN, RENTAL_CAR_PROVIDER, RAILWAY.

        :param issuer_type: The issuer_type of this FrequentTravelerCard.
        :type: str
        """
        self._issuer_type = issuer_type

    @property
    def company_code(self):
        """
        Gets the company_code of this FrequentTravelerCard.
        The identifying code of the issuer, within the context of its type. For example&colon; BA (and if the issuer type is AIRLINE, this indicates BA=British Airways).

        :return: The company_code of this FrequentTravelerCard.
        :rtype: str
        """
        return self._company_code

    @company_code.setter
    def company_code(self, company_code):
        """
        Sets the company_code of this FrequentTravelerCard.
        The identifying code of the issuer, within the context of its type. For example&colon; BA (and if the issuer type is AIRLINE, this indicates BA=British Airways).

        :param company_code: The company_code of this FrequentTravelerCard.
        :type: str
        """
        self._company_code = company_code

    @property
    def card_number(self):
        """
        Gets the card_number of this FrequentTravelerCard.
        The identifying number (or string) marked on the card. For example&colon; 12345678.

        :return: The card_number of this FrequentTravelerCard.
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """
        Sets the card_number of this FrequentTravelerCard.
        The identifying number (or string) marked on the card. For example&colon; 12345678.

        :param card_number: The card_number of this FrequentTravelerCard.
        :type: str
        """
        self._card_number = card_number

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

