# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class TravelRecordResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        TravelRecordResponse - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'record_locator': 'str',
            'header': 'TravelRecordHeader',
            'messages': 'list[Message]',
            'travelers': 'list[Traveler]',
            'reservation': 'Reservation'
        }

        self.attribute_map = {
            'record_locator': 'record_locator',
            'header': 'header',
            'messages': 'messages',
            'travelers': 'travelers',
            'reservation': 'reservation'
        }

        self._record_locator = None
        self._header = None
        self._messages = None
        self._travelers = None
        self._reservation = None

    @property
    def record_locator(self):
        """
        Gets the record_locator of this TravelRecordResponse.
        6 character identifier of this travel record on the Amadeus system.

        :return: The record_locator of this TravelRecordResponse.
        :rtype: str
        """
        return self._record_locator

    @record_locator.setter
    def record_locator(self, record_locator):
        """
        Sets the record_locator of this TravelRecordResponse.
        6 character identifier of this travel record on the Amadeus system.

        :param record_locator: The record_locator of this TravelRecordResponse.
        :type: str
        """
        self._record_locator = record_locator

    @property
    def header(self):
        """
        Gets the header of this TravelRecordResponse.
        Summarized metadata on the record that has been retrieved.

        :return: The header of this TravelRecordResponse.
        :rtype: TravelRecordHeader
        """
        return self._header

    @header.setter
    def header(self, header):
        """
        Sets the header of this TravelRecordResponse.
        Summarized metadata on the record that has been retrieved.

        :param header: The header of this TravelRecordResponse.
        :type: TravelRecordHeader
        """
        self._header = header

    @property
    def messages(self):
        """
        Gets the messages of this TravelRecordResponse.
        Functional or technical messages associated with the retrieval of this travel record.

        :return: The messages of this TravelRecordResponse.
        :rtype: list[Message]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """
        Sets the messages of this TravelRecordResponse.
        Functional or technical messages associated with the retrieval of this travel record.

        :param messages: The messages of this TravelRecordResponse.
        :type: list[Message]
        """
        self._messages = messages

    @property
    def travelers(self):
        """
        Gets the travelers of this TravelRecordResponse.
        Information about each traveler who may be included as part of this travel record.

        :return: The travelers of this TravelRecordResponse.
        :rtype: list[Traveler]
        """
        return self._travelers

    @travelers.setter
    def travelers(self, travelers):
        """
        Sets the travelers of this TravelRecordResponse.
        Information about each traveler who may be included as part of this travel record.

        :param travelers: The travelers of this TravelRecordResponse.
        :type: list[Traveler]
        """
        self._travelers = travelers

    @property
    def reservation(self):
        """
        Gets the reservation of this TravelRecordResponse.
        Details about the itineraries that have been reserved as part of this travel record.

        :return: The reservation of this TravelRecordResponse.
        :rtype: Reservation
        """
        return self._reservation

    @reservation.setter
    def reservation(self, reservation):
        """
        Sets the reservation of this TravelRecordResponse.
        Details about the itineraries that have been reserved as part of this travel record.

        :param reservation: The reservation of this TravelRecordResponse.
        :type: Reservation
        """
        self._reservation = reservation

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

