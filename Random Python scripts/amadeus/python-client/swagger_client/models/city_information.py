# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class CityInformation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        CityInformation - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'code': 'str',
            'geonames_id': 'str',
            'name': 'str',
            'state': 'str',
            'country': 'str',
            'location': 'Geolocation',
            'timezone': 'str'
        }

        self.attribute_map = {
            'code': 'code',
            'geonames_id': 'geonames_ID',
            'name': 'name',
            'state': 'state',
            'country': 'country',
            'location': 'location',
            'timezone': 'timezone'
        }

        self._code = None
        self._geonames_id = None
        self._name = None
        self._state = None
        self._country = None
        self._location = None
        self._timezone = None

    @property
    def code(self):
        """
        Gets the code of this CityInformation.
        The IATA code of this city. If you intend to make a flight search from the output of this call, I recommend using this as your input parameter as it generally gives the best results.

        :return: The code of this CityInformation.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """
        Sets the code of this CityInformation.
        The IATA code of this city. If you intend to make a flight search from the output of this call, I recommend using this as your input parameter as it generally gives the best results.

        :param code: The code of this CityInformation.
        :type: str
        """
        self._code = code

    @property
    def geonames_id(self):
        """
        Gets the geonames_id of this CityInformation.
        The ID of this city in the open-sourced Geonames DB

        :return: The geonames_id of this CityInformation.
        :rtype: str
        """
        return self._geonames_id

    @geonames_id.setter
    def geonames_id(self, geonames_id):
        """
        Sets the geonames_id of this CityInformation.
        The ID of this city in the open-sourced Geonames DB

        :param geonames_id: The geonames_id of this CityInformation.
        :type: str
        """
        self._geonames_id = geonames_id

    @property
    def name(self):
        """
        Gets the name of this CityInformation.
        The name of this city, in English

        :return: The name of this CityInformation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this CityInformation.
        The name of this city, in English

        :param name: The name of this CityInformation.
        :type: str
        """
        self._name = name

    @property
    def state(self):
        """
        Gets the state of this CityInformation.
        The state code of this city, if applicable

        :return: The state of this CityInformation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """
        Sets the state of this CityInformation.
        The state code of this city, if applicable

        :param state: The state of this CityInformation.
        :type: str
        """
        self._state = state

    @property
    def country(self):
        """
        Gets the country of this CityInformation.
        The <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country code</a> in which this city can be found.

        :return: The country of this CityInformation.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """
        Sets the country of this CityInformation.
        The <a href=\"http://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\">ISO 3166-1 alpha-2 country code</a> in which this city can be found.

        :param country: The country of this CityInformation.
        :type: str
        """
        self._country = country

    @property
    def location(self):
        """
        Gets the location of this CityInformation.
        This city's approximate geolocation. The exact center of a city is often not an exact location, so be aware that this might not be exact.

        :return: The location of this CityInformation.
        :rtype: Geolocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this CityInformation.
        This city's approximate geolocation. The exact center of a city is often not an exact location, so be aware that this might not be exact.

        :param location: The location of this CityInformation.
        :type: Geolocation
        """
        self._location = location

    @property
    def timezone(self):
        """
        Gets the timezone of this CityInformation.
        The <a href=\"http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">Olson format</a> name of the timezone in which this city is located

        :return: The timezone of this CityInformation.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """
        Sets the timezone of this CityInformation.
        The <a href=\"http://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">Olson format</a> name of the timezone in which this city is located

        :param timezone: The timezone of this CityInformation.
        :type: str
        """
        self._timezone = timezone

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

