# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class AffiliatePayout(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        AffiliatePayout - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'cpc': 'Amount',
            'cpa': 'Amount',
            'cps': 'Amount'
        }

        self.attribute_map = {
            'cpc': 'CPC',
            'cpa': 'CPA',
            'cps': 'CPS'
        }

        self._cpc = None
        self._cpa = None
        self._cps = None

    @property
    def cpc(self):
        """
        Gets the cpc of this AffiliatePayout.
        See https://en.wikipedia.org/wiki/Pay_per_click for commission earned when the provided deep link is clicked

        :return: The cpc of this AffiliatePayout.
        :rtype: Amount
        """
        return self._cpc

    @cpc.setter
    def cpc(self, cpc):
        """
        Sets the cpc of this AffiliatePayout.
        See https://en.wikipedia.org/wiki/Pay_per_click for commission earned when the provided deep link is clicked

        :param cpc: The cpc of this AffiliatePayout.
        :type: Amount
        """
        self._cpc = cpc

    @property
    def cpa(self):
        """
        Gets the cpa of this AffiliatePayout.
        See https://en.wikipedia.org/wiki/Cost_per_action for commission earned for a given action from the provided deep link

        :return: The cpa of this AffiliatePayout.
        :rtype: Amount
        """
        return self._cpa

    @cpa.setter
    def cpa(self, cpa):
        """
        Sets the cpa of this AffiliatePayout.
        See https://en.wikipedia.org/wiki/Cost_per_action for commission earned for a given action from the provided deep link

        :param cpa: The cpa of this AffiliatePayout.
        :type: Amount
        """
        self._cpa = cpa

    @property
    def cps(self):
        """
        Gets the cps of this AffiliatePayout.
        See https://en.wikipedia.org/wiki/Pay_per_sale for commission earned as a result of a booking made from the provided deep link

        :return: The cps of this AffiliatePayout.
        :rtype: Amount
        """
        return self._cps

    @cps.setter
    def cps(self, cps):
        """
        Sets the cps of this AffiliatePayout.
        See https://en.wikipedia.org/wiki/Pay_per_sale for commission earned as a result of a booking made from the provided deep link

        :param cps: The cps of this AffiliatePayout.
        :type: Amount
        """
        self._cps = cps

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

