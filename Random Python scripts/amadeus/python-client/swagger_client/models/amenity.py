# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Amenity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Amenity - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'amenity': 'str',
            'ota_code': 'str',
            'description': 'str'
        }

        self.attribute_map = {
            'amenity': 'amenity',
            'ota_code': 'ota_code',
            'description': 'description'
        }

        self._amenity = None
        self._ota_code = None
        self._description = None

    @property
    def amenity(self):
        """
        Gets the amenity of this Amenity.
        <a href=\"hotels-api-supported-amenities-filter\">The amenity code</a>

        :return: The amenity of this Amenity.
        :rtype: str
        """
        return self._amenity

    @amenity.setter
    def amenity(self, amenity):
        """
        Sets the amenity of this Amenity.
        <a href=\"hotels-api-supported-amenities-filter\">The amenity code</a>

        :param amenity: The amenity of this Amenity.
        :type: str
        """
        self._amenity = amenity

    @property
    def ota_code(self):
        """
        Gets the ota_code of this Amenity.
        The <a href=\"http://www.opentravel.org/\">Open Travel Alliance</a> <a href=\"ota-hotel-amenity-code-table\">Hotel Amenities Code</a> for this amenity.

        :return: The ota_code of this Amenity.
        :rtype: str
        """
        return self._ota_code

    @ota_code.setter
    def ota_code(self, ota_code):
        """
        Sets the ota_code of this Amenity.
        The <a href=\"http://www.opentravel.org/\">Open Travel Alliance</a> <a href=\"ota-hotel-amenity-code-table\">Hotel Amenities Code</a> for this amenity.

        :param ota_code: The ota_code of this Amenity.
        :type: str
        """
        self._ota_code = ota_code

    @property
    def description(self):
        """
        Gets the description of this Amenity.
        The decoded text description for this amenity code, where available.

        :return: The description of this Amenity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Amenity.
        The decoded text description for this amenity code, where available.

        :param description: The description of this Amenity.
        :type: str
        """
        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other): 
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """ 
        Returns true if both objects are not equal
        """
        return not self == other

